-- ======================== INSERT INTO AUTHROS TABLE ==========================
BEGIN 
FOR counter IN 1..100000 LOOP
INSERT INTO authors (author_id, author_name, author_surname, author_birthday)
VALUES (
      counter,
      'Author_name_' || to_char(counter),
      'Author_surname_' || to_char(counter),
      TO_DATE(TRUNC(DBMS_RANDOM.VALUE(TO_CHAR(DATE '1900-01-01', 'J'),
                                      TO_CHAR(DATE '2000-01-01', 'J')
                                      )
                    ), 'J'
              )
      );
END LOOP;
COMMIT;
END;

-- ======================= INSERT INTO LIBRARIANS TABLE ========================
BEGIN 
FOR counter IN 1..100000 LOOP
INSERT INTO librarians (librarian_id, librarian_name, librarian_surname)
VALUES (
      counter,
      'Librarian_name_' || to_char(counter),
      'Librarian_surname_' || to_char(counter)
      );
END LOOP;
COMMIT;
END;

-- ======================== INSERT INTO STUDENTS TABLE =========================
BEGIN 
FOR counter IN 1..100000 LOOP
INSERT INTO students (student_id, student_name, student_surname, student_adress, level_of_study)
VALUES (
      counter,
      'Student_name_' || to_char(counter),
      'Student_surname_' || to_char(counter),
      'Student_adress_' || to_char(counter),
      CASE ROUND(DBMS_RANDOM.VALUE(1,3))
       WHEN 1 THEN 'license'
       WHEN 2 THEN 'master'
       ELSE 'doctorate'
      END
      );
END LOOP;
COMMIT;
END;

-- ========================= INSERT INTO BOOKS TABLE ===========================
BEGIN 
FOR counter IN 1..100000 LOOP
INSERT INTO books (book_id, book_name, author_id, book_category, isbn, appearance_year)
VALUES (
      counter,
      'Book_name_' || to_char(counter),
      DBMS_RANDOM.VALUE(1, 100000),
      CASE ROUND(DBMS_RANDOM.VALUE(1,3))
       WHEN 1 THEN 'Category_1'
       WHEN 2 THEN 'Category_2'
       ELSE 'Category_3'
      END,
      counter,
      DBMS_RANDOM.VALUE(1910, 2020)
      );
END LOOP;
COMMIT;
END;

-- ========================= INSERT INTO BORROWS TABLE ===========================
BEGIN 
FOR counter IN 1..99999 LOOP
INSERT INTO borrows (borrow_id, student_id, librarian_id, book_id, taken_date, brought_date)
VALUES (
      counter,
      DBMS_RANDOM.VALUE(1, 99999),
      DBMS_RANDOM.VALUE(1, 99999),
      DBMS_RANDOM.VALUE(1, 99999),
      TO_DATE(TRUNC(DBMS_RANDOM.VALUE(TO_CHAR(DATE '2000-01-01', 'J'),
                                      TO_CHAR(DATE '2020-01-01', 'J')
                                      )
                    ), 'J'
              ),
      TO_DATE(TRUNC(DBMS_RANDOM.VALUE(TO_CHAR(DATE '2000-01-01', 'J'),
                                      TO_CHAR(DATE '2020-01-01', 'J')
                                      )
                    ), 'J'
              )
      );
END LOOP;
COMMIT;
END;



-- =============================================================================
-- ============== OPTIMIZING QUERRYS WITH GOOD SELECTIVITY ==============
-- OPTIMIZATION 1: ROWID =========================================================
SELECT * FROM books WHERE book_name='Book_name_5285';

SELECT rowid FROM books WHERE book_name='Book_name_5285';
SELECT * FROM books WHERE rowid = 'AAASAjAAJAAADmTAAA';

-- OPTIMIZATION 2 - FAIL: INDEX BTree  ===========================================
SELECT * FROM authors WHERE AUTHOR_SURNAME='Author_surname_5000';

CREATE INDEX id_authors_surname on authors('author_surname');

DROP INDEX id_authors_surname;

-- OPTIMIZATION 3: Predicat LIKE  ================================================
SELECT * FROM authors WHERE AUTHOR_SURNAME='Author_surname_5000';

SELECT * FROM authors WHERE AUTHOR_SURNAME LIKE 'Author_surname_500%';

-- OPTIMIZATION 4 - FAIL: INDEX BITMAP  ==========================================
SELECT * FROM authors WHERE AUTHOR_SURNAME='Author_surname_5000';

create bitmap index bix_authors_surname on authors('author_surname');

DROP INDEX bix_authors_surname;

-- OPTIMIZATION 5: IOT Tables  ===================================================
CREATE TABLE authors_iot(
  author_id NUMBER(6) CONSTRAINT pk_authors_iot PRIMARY KEY,
  author_name VARCHAR2(50),
  author_surname VARCHAR2(50),
  author_birthday date
) organization index;

insert into authors_iot select * from authors;

SELECT * FROM authors WHERE AUTHOR_SURNAME='Author_surname_5000';
SELECT * FROM authors_iot WHERE AUTHOR_SURNAME='Author_surname_5000';

-- =============================================================================
-- ============== OPTIMIZING QUERRYS WITH LOW SELECTIVITY =============
-- OPTIMIZATION 1: Keeping data in memory - KEEP ===========================
SELECT * FROM borrows;

ALTER TABLE borrows STORAGE (BUFFER_POOL KEEP) CACHE;
SELECT * FROM borrows;

ALTER SYSTEM FLUSH BUFFER_CACHE;
ALTER SYSTEM FLUSH SHARED_POOL;

-- OPTIMIZATION 2: Keeping data in memory - RECYCLE ========================
SELECT * FROM borrows;

ALTER TABLE borrows STORAGE (BUFFER_POOL RECYCLE) CACHE;
SELECT * FROM borrows;

ALTER SYSTEM FLUSH BUFFER_CACHE;
ALTER SYSTEM FLUSH SHARED_POOL;

-- OPTIMIZATION 3: Data compression =============================================
SELECT * FROM students;
CREATE TABLE students_bak COMPRESS AS SELECT * FROM students;

SELECT * FROM students_bak;


-- =============================================================================
-- =========================== OPTIMIZATION OF JOINTS =========================
-- OPTIMIZATION 1: MATERIALIZED VIEW =============================================
SELECT * FROM borrows br JOIN books bk
ON br.book_id = bk.book_id
WHERE bk.book_id = '123';

CREATE MATERIALIZED VIEW br_bk_book_id
BUILD IMMEDIATE
REFRESH COMPLETE
ON COMMIT
AS
SELECT * FROM borrows br JOIN books bk
ON br.book_id = bk.book_id
WHERE bk.book_id = '123';

SELECT * FROM br_bk_book_id;

-- OPTIMIZATION 2: INDEX ========================================================
SELECT b.borrow_id, b.book_id, b.librarian_id, l.librarian_name FROM borrows b JOIN librarians l
ON b.librarian_id = l.librarian_id;

CREATE INDEX ix_borrows ON borrows(borrow_id, book_id, librarian_id);
CREATE INDEX ix_librarian_id ON librarians(librarian_id, librarian_name);

DROP INDEX ix_librarian_id;
DROP INDEX ix_borrows;







